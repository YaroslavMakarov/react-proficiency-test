{"version":3,"sources":["helpers/api.ts","store/charactersStore.ts","store/episodesStore.ts","store/locationsStore.ts","store/searchFieldStore.ts","store/rootStore.ts","helpers/urlUtility.ts","components/Character/Character.tsx","components/button-back/ButtonBack.tsx","components/SearchField/SearchField.tsx","components/Characters/Characters.tsx","components/Episode/Episode.tsx","components/Episodes/Episodes.tsx","components/HomePage/HomePage.tsx","components/Location/Location.tsx","components/Locations/Locations.tsx","components/App/App.tsx","reportWebVitals.js","index.tsx"],"names":["getData","endPoint","a","fetch","responseDataAPI","json","dataFromServer","START_LOADING_CHARACTERS","SUCCESS_LOADING_CHARACTERS","ERROR_LOADING_CHARACTERS","START_LAZY_LOADING","SUCCESS_LAZY_LOADING","ERROR_LAZY_LOADING","SUCCESS_LOADING_CHARACTER","startLoadingCharacters","isLoading","type","successLoadingCharacters","characters","next","errorLoading","isError","startLazyLoading","isLazyLoading","successLazyLoading","errorLazyLoading","isLazyError","successLoadingCharacter","character","loadingCharacters","url","startLoading","successLoading","errLoading","dispatch","then","data","catch","results","info","initialCharactersState","charactersReducer","state","action","START_LOADING_EPISODES","SUCCESS_LOADING_EPISODES","ERROR_LOADING_EPISODES","START_LAZY_EPISODES","SUCCESS_LAZY_EPISODES","ERROR_LAZY_EPISODES","SUCCESS_LOADING_EPISODE","startLoadingEpisodes","successLoadingEpisodes","episodes","errorLoadingEpisodes","startLazyEpisodes","successLazyEpisodes","errorLazyEpisodes","successLoadingEpisode","episode","loadingEpisodes","initialEpisodesState","episodesReducer","START_LOADING_LOCATIONS","SUCCESS_LOADING_LOCATIONS","ERROR_LOADING_LOCATIONS","START_LAZY_LOCATIONS","SUCCESS_LAZY_LOCATIONS","ERROR_LAZY_LOCATIONS","SUCCESS_LOADING_LOCATION","startLoadingLocations","successLoadingLocations","locations","errorLoadingLocations","startLazyLocations","successLazyLocations","errorLazyLocations","successLoadingLocation","location","loadingLocations","initialLocationsState","locationsReducer","SEARCH_VALUE","initialSearchValueState","value","searchValueReducer","allReducers","combineReducers","charactersInfo","episodesInfo","locationInfo","searchValue","store","createStore","composeWithDevTools","applyMiddleware","thunk","churactersSelector","searchVlue","toLocaleLowerCase","trim","filter","gender","name","species","status","includes","nextSelector","isLoadingSelector","episodesSelector","air_date","isLoadingEpisodesSelector","isLazyLoadingEpisodesSelector","nextEpisodesSelector","isLoadingLocationsSelector","isLazyLoadingLocationSelector","nextLocationsSelector","locationsSelector","dimencion","searchValueSelector","urlNumber","split","length","urlParam","splitedURL","Character","image","origin","locationNumber","originNumber","episodesNumbers","i","push","className","src","alt","to","map","number","ButtonBack","history","useHistory","onClick","goBack","width","height","viewBox","fill","xmlns","fillRule","clipRule","d","SearchField","useSelector","searchValueDispatch","useDispatch","useLocation","passURL","pathname","onChange","target","setSearchValue","placeholder","Characters","personThunkDispatch","pageEnd","useRef","useState","isLazyLoad","setLazyLoad","params","useParams","useEffect","characterID","observer","IntersectionObserver","entries","isIntersecting","rootMargin","current","observe","param","id","ref","Episode","epis","characterNumbers","Episodes","episodeThunkDispatch","episodesID","HomePage","exact","Location","loca","residents","residentsNumbers","Locations","locationThunkDispatch","locationsID","App","path","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.efa73d83.chunk.js","sourcesContent":["const API_URL = 'https://rickandmortyapi.com/api/';\r\n\r\nexport const getData = async (endPoint: string) => {\r\n    const responseDataAPI = await fetch(`${API_URL}${endPoint}`);\r\n    const dataFromServer = await responseDataAPI.json();\r\n\r\n    return dataFromServer;\r\n};","import { Action, Dispatch } from 'redux';\r\nimport { getData } from '../helpers/api';\r\nimport { ThunkType } from './rootStore';\r\n\r\nconst START_LOADING_CHARACTERS = 'START_LOADING_CHARACTERS';\r\nconst SUCCESS_LOADING_CHARACTERS = 'SUCCESS_LOADING_CHARACTERS';\r\nconst ERROR_LOADING_CHARACTERS = 'ERROR_LOADING_CHARACTERS';\r\nconst START_LAZY_LOADING = 'START_LAZY_LOADING';\r\nconst SUCCESS_LAZY_LOADING = 'SUCCESS_LEZY_LOADING';\r\nconst ERROR_LAZY_LOADING = 'ERROR_LAZY_LOADING';\r\nconst SUCCESS_LOADING_CHARACTER = 'SUCCESS_LOADING_CHARACTER';\r\n\r\n//ActionTypes and action cretors\r\nexport type StartLoadingCharacters = Action<typeof START_LOADING_CHARACTERS> & {\r\n    isLoading: boolean;\r\n};\r\nexport type SuccessLoadingCharacters = Action<typeof SUCCESS_LOADING_CHARACTERS> & {\r\n    characters: Array<Character>;\r\n    next: string | null;\r\n};\r\nexport type ErrorLoadingCharacters = Action<typeof ERROR_LOADING_CHARACTERS> & {\r\n    isError: boolean;\r\n};\r\nexport type StartLazyLoading = Action<typeof START_LAZY_LOADING> & {\r\n    isLazyLoading: boolean;\r\n};\r\nexport type SuccessLazyLoading = Action<typeof SUCCESS_LAZY_LOADING> & {\r\n    characters: Array<Character>;\r\n    next: string | null;\r\n};\r\nexport type ErrorLazyLoading = Action<typeof ERROR_LAZY_LOADING> & {\r\n    isLazyError: boolean;\r\n}\r\nexport type SuccessLoadingCharacter = Action<typeof SUCCESS_LOADING_CHARACTER> & {\r\n    character: Character[];\r\n};\r\n\r\nexport const startLoadingCharacters = (isLoading: boolean): StartLoadingCharacters => ({\r\n    type: START_LOADING_CHARACTERS,\r\n    isLoading,\r\n});\r\nexport const successLoadingCharacters = (characters: Array<Character>, next: string | null): SuccessLoadingCharacters => ({\r\n    type: SUCCESS_LOADING_CHARACTERS,\r\n    characters,\r\n    next\r\n});\r\nexport const errorLoading = (isError: boolean): ErrorLoadingCharacters => ({\r\n    type: ERROR_LOADING_CHARACTERS,\r\n    isError,\r\n});\r\nexport const startLazyLoading = (isLazyLoading: boolean): StartLazyLoading => ({\r\n    type: START_LAZY_LOADING,\r\n    isLazyLoading,\r\n});\r\nexport const successLazyLoading = (characters: Array<Character>, next: string | null): SuccessLazyLoading => ({\r\n    type: SUCCESS_LAZY_LOADING,\r\n    characters,\r\n    next\r\n});\r\nexport const errorLazyLoading = (isLazyError: boolean): ErrorLazyLoading => ({\r\n    type: ERROR_LAZY_LOADING,\r\n    isLazyError,\r\n});\r\nexport const successLoadingCharacter = (character: Character[]): SuccessLoadingCharacter => ({\r\n    type: SUCCESS_LOADING_CHARACTER,\r\n    character\r\n}); \r\n\r\n//thunks\r\ntype StartLoadingCharacktersAC = (isLoading: boolean) => StartLoadingCharacters;\r\ntype StartLazyLoadingCharacktersAC = (isLazyLoading: boolean) => StartLazyLoading;\r\ntype SuccessLoadingCharactersAC = (characters: Character[], next: string | null) => SuccessLoadingCharacters;\r\ntype SuccessLazyLoadingCharactersAC = (characters: Character[], next: string | null) => SuccessLazyLoading;\r\ntype SuccessLoadingCharacterAC = (character: Character[]) => SuccessLoadingCharacter;\r\ntype ErrorLoadingCharactersAC = (isError: boolean) => ErrorLoadingCharacters;\r\ntype ErrorLazyLoadingAC = (isLazyError: boolean) => ErrorLazyLoading;\r\n\r\ntype CharactersAC = [\r\n    (StartLoadingCharacktersAC | StartLazyLoadingCharacktersAC),\r\n    (SuccessLoadingCharactersAC | SuccessLazyLoadingCharactersAC | SuccessLoadingCharacterAC),\r\n    (ErrorLoadingCharactersAC | ErrorLazyLoadingAC),\r\n];\r\n\r\nexport const loadingCharacters = (url: string, [startLoading, successLoading, errLoading]: CharactersAC): ThunkType => {\r\n    return (dispatch: Dispatch<AllCharactersActions>) => {\r\n        dispatch(startLoading(true));\r\n        if (successLoading === successLoadingCharacter) {\r\n            return getData(url)\r\n            .then(data => dispatch(successLoading([data])))\r\n            .catch(() => dispatch(errLoading(true)));\r\n        } else {\r\n            return getData(url)\r\n            .then(data => dispatch(successLoading(data.results, data.info.next)))\r\n            .catch(() => dispatch(errLoading(true)));\r\n        }\r\n    };\r\n};\r\n\r\nexport type InitialCharactersState = {\r\n    isLoading: boolean;\r\n    isError: boolean;\r\n    isLazyLoading: boolean;\r\n    isLazyError: boolean;\r\n    characters: Array<Character>;\r\n    next: string | null;\r\n};\r\n\r\nconst initialCharactersState: InitialCharactersState = {\r\n    isLoading: false,\r\n    isError: false,\r\n    isLazyLoading: false,\r\n    isLazyError: false,\r\n    characters: [],\r\n    next: null,\r\n};\r\n\r\nexport type AllCharactersActions = StartLoadingCharacters | SuccessLoadingCharacters | ErrorLoadingCharacters\r\n                                   | StartLazyLoading | SuccessLazyLoading | ErrorLazyLoading | SuccessLoadingCharacter;\r\n\r\nconst charactersReducer = (state = initialCharactersState, action: AllCharactersActions) => {\r\n    switch(action.type) {\r\n        case START_LOADING_CHARACTERS: return {\r\n            ...state,\r\n            isLoading: action.isLoading\r\n        };\r\n        case SUCCESS_LOADING_CHARACTERS: return {\r\n            ...state,\r\n            characters: [...action.characters],\r\n            isLoading: false,\r\n            next: action.next\r\n        };\r\n        case ERROR_LOADING_CHARACTERS: return {\r\n            ...state,\r\n            isLoading: false,\r\n            isError: action.isError,\r\n        };\r\n        case START_LAZY_LOADING: return {\r\n            ...state,\r\n            isLazyLoading: action.isLazyLoading\r\n        };\r\n        case SUCCESS_LAZY_LOADING: return {\r\n            ...state,\r\n            characters: [...state.characters, ...action.characters],\r\n            isLazyLoading: false,\r\n            next: action.next,\r\n        };\r\n        case ERROR_LAZY_LOADING: return {\r\n            ...state,\r\n            isLazyError: action.isLazyError,\r\n        };\r\n        case SUCCESS_LOADING_CHARACTER: return {\r\n            ...state,\r\n            characters: [...action.character],\r\n            isLoading: false,\r\n        };\r\n\r\n        default: return state;\r\n    };\r\n};\r\n\r\nexport default charactersReducer;","import { Action, Dispatch } from 'redux';\r\nimport { getData } from '../helpers/api';\r\nimport { ThunkType } from './rootStore';\r\n\r\nconst START_LOADING_EPISODES = 'START_LOADING_EPISODES';\r\nconst SUCCESS_LOADING_EPISODES = 'SUCCESS_LOADING_EPISODES';\r\nconst ERROR_LOADING_EPISODES = 'ERROR_LOADING_EPISODES';\r\nconst START_LAZY_EPISODES = 'START_LAZY_EPISODES';\r\nconst SUCCESS_LAZY_EPISODES = 'SUCCESS_LEZY_EPISODES';\r\nconst ERROR_LAZY_EPISODES = 'ERROR_LAZY_EPISODES';\r\nconst SUCCESS_LOADING_EPISODE = 'SUCCESS_LOADING_EPISODE';\r\n\r\n//ActionTypes and action cretors\r\nexport type StartLoadingEpisodes = Action<typeof START_LOADING_EPISODES> & {\r\n    isLoading: boolean;\r\n};\r\nexport type SuccessLoadingEpisodes = Action<typeof SUCCESS_LOADING_EPISODES> & {\r\n    episodes: Array<Episode>;\r\n    next: string | null;\r\n};\r\nexport type ErrorLoadingEpisodes = Action<typeof ERROR_LOADING_EPISODES> & {\r\n    isError: boolean;\r\n};\r\nexport type StartLazyEpisodes= Action<typeof START_LAZY_EPISODES> & {\r\n    isLazyLoading: boolean;\r\n};\r\nexport type SuccessLazyEpisodes = Action<typeof SUCCESS_LAZY_EPISODES> & {\r\n    episodes: Array<Episode>;\r\n    next: string | null;\r\n};\r\nexport type ErrorLazyEpisodes = Action<typeof ERROR_LAZY_EPISODES> & {\r\n    isLazyError: boolean;\r\n}\r\nexport type SuccessLoadingEpisode = Action<typeof SUCCESS_LOADING_EPISODE> & {\r\n    episode: Episode[];\r\n};\r\n\r\nexport const startLoadingEpisodes = (isLoading: boolean): StartLoadingEpisodes => ({\r\n    type: START_LOADING_EPISODES,\r\n    isLoading,\r\n});\r\nexport const successLoadingEpisodes = (episodes: Array<Episode>, next: string | null): SuccessLoadingEpisodes => ({\r\n    type: SUCCESS_LOADING_EPISODES,\r\n    episodes,\r\n    next\r\n});\r\nexport const errorLoadingEpisodes = (isError: boolean): ErrorLoadingEpisodes => ({\r\n    type: ERROR_LOADING_EPISODES,\r\n    isError,\r\n});\r\nexport const startLazyEpisodes = (isLazyLoading: boolean): StartLazyEpisodes => ({\r\n    type: START_LAZY_EPISODES,\r\n    isLazyLoading,\r\n});\r\nexport const successLazyEpisodes = (episodes: Array<Episode>, next: string | null): SuccessLazyEpisodes => ({\r\n    type: SUCCESS_LAZY_EPISODES,\r\n    episodes,\r\n    next\r\n});\r\nexport const errorLazyEpisodes = (isLazyError: boolean): ErrorLazyEpisodes => ({\r\n    type: ERROR_LAZY_EPISODES,\r\n    isLazyError,\r\n});\r\nexport const successLoadingEpisode = (episode: Episode[]): SuccessLoadingEpisode => ({\r\n    type: SUCCESS_LOADING_EPISODE,\r\n    episode\r\n}); \r\n\r\n//thunks\r\ntype StartLoadingEpisodesAC = (isLoading: boolean) => StartLoadingEpisodes;\r\ntype StartLazyEpisodesAC = (isLazyLoading: boolean) => StartLazyEpisodes;\r\ntype SuccessLoadingEpisodesAC = (episodes: Episode[], next: string | null) => SuccessLoadingEpisodes;\r\ntype SuccessLazyEpisodesAC = (episodes: Episode[], next: string | null) => SuccessLazyEpisodes;\r\ntype SuccessLoadingEpisodeAC = (episode: Episode[]) => SuccessLoadingEpisode;\r\ntype ErrorLoadingEpisodesAC = (isError: boolean) => ErrorLoadingEpisodes;\r\ntype ErrorLazyEpisodesAC = (isLazyError: boolean) => ErrorLazyEpisodes;\r\n\r\ntype ThunkActions = [\r\n    (StartLoadingEpisodesAC | StartLazyEpisodesAC),\r\n    (SuccessLoadingEpisodesAC | SuccessLazyEpisodesAC | SuccessLoadingEpisodeAC),\r\n    (ErrorLoadingEpisodesAC | ErrorLazyEpisodesAC),\r\n];\r\n\r\nexport const loadingEpisodes = (url: string, [startLoading, successLoading, errLoading]: ThunkActions): ThunkType => {\r\n    return (dispatch: Dispatch<AllEpisodesActions>) => {\r\n        dispatch(startLoading(true));\r\n        if (successLoading === successLoadingEpisode) {\r\n            return getData(url)\r\n            .then(data => dispatch(successLoading([data])))\r\n            .catch(() => dispatch(errLoading(true)));\r\n        } else {\r\n            return getData(url)\r\n            .then(data => dispatch(successLoading(data.results, data.info.next)))\r\n            .catch(() => dispatch(errLoading(true)));\r\n        }\r\n    };\r\n};\r\n\r\nexport type InitialEpisodesState = {\r\n    isLoading: boolean;\r\n    isError: boolean;\r\n    isLazyLoading: boolean;\r\n    isLazyError: boolean;\r\n    episodes: Array<Episode>;\r\n    next: string | null;\r\n};\r\n\r\nconst initialEpisodesState: InitialEpisodesState = {\r\n    isLoading: false,\r\n    isError: false,\r\n    isLazyLoading: false,\r\n    isLazyError: false,\r\n    episodes: [],\r\n    next: null,\r\n};\r\n\r\nexport type AllEpisodesActions = StartLoadingEpisodes | SuccessLoadingEpisodes | ErrorLoadingEpisodes\r\n                                   | StartLazyEpisodes | SuccessLazyEpisodes | ErrorLazyEpisodes | SuccessLoadingEpisode;\r\n\r\nconst episodesReducer = (state = initialEpisodesState, action: AllEpisodesActions) => {\r\n    switch(action.type) {\r\n        case START_LOADING_EPISODES: return {\r\n            ...state,\r\n            isLoading: action.isLoading\r\n        };\r\n        case SUCCESS_LOADING_EPISODES: return {\r\n            ...state,\r\n            episodes: [...action.episodes],\r\n            isLoading: false,\r\n            next: action.next\r\n        };\r\n        case ERROR_LOADING_EPISODES: return {\r\n            ...state,\r\n            isLoading: false,\r\n            isError: action.isError,\r\n        };\r\n        case START_LAZY_EPISODES: return {\r\n            ...state,\r\n            isLazyLoading: action.isLazyLoading\r\n        };\r\n        case SUCCESS_LAZY_EPISODES: return {\r\n            ...state,\r\n            episodes: [...state.episodes, ...action.episodes],\r\n            isLazyLoading: false,\r\n            next: action.next,\r\n        };\r\n        case ERROR_LAZY_EPISODES: return {\r\n            ...state,\r\n            isLazyError: action.isLazyError,\r\n        };\r\n        case SUCCESS_LOADING_EPISODE: return {\r\n            ...state,\r\n            episodes: [...action.episode],\r\n            isLoading: false,\r\n        };\r\n                                \r\n        default: return state;\r\n    };\r\n};\r\n                                \r\nexport default episodesReducer;","import { Action, Dispatch } from 'redux';\r\nimport { getData } from '../helpers/api';\r\nimport { ThunkType } from './rootStore';\r\n\r\nconst START_LOADING_LOCATIONS = 'START_LOADING_LOCATIONS';\r\nconst SUCCESS_LOADING_LOCATIONS = 'SUCCESS_LOADING_LOCATIONS';\r\nconst ERROR_LOADING_LOCATIONS = 'ERROR_LOADING_LOCATIONS';\r\nconst START_LAZY_LOCATIONS = 'START_LAZY_LOCATIONS';\r\nconst SUCCESS_LAZY_LOCATIONS = 'SUCCESS_LEZY_LOCATIONS';\r\nconst ERROR_LAZY_LOCATIONS = 'ERROR_LAZY_LOCATIONS';\r\nconst SUCCESS_LOADING_LOCATION = 'SUCCESS_LOADING_LOCATION';\r\n\r\n//ActionTypes and action cretors\r\nexport type StartLoadingLocations = Action<typeof START_LOADING_LOCATIONS> & {\r\n    isLoading: boolean;\r\n};\r\nexport type SuccessLoadingLocations = Action<typeof SUCCESS_LOADING_LOCATIONS> & {\r\n    locations: Array<Location>;\r\n    next: string | null;\r\n};\r\nexport type ErrorLoadingLocations = Action<typeof ERROR_LOADING_LOCATIONS> & {\r\n    isError: boolean;\r\n};\r\nexport type StartLazyLocations= Action<typeof START_LAZY_LOCATIONS> & {\r\n    isLazyLoading: boolean;\r\n};\r\nexport type SuccessLazyLocations = Action<typeof SUCCESS_LAZY_LOCATIONS> & {\r\n    locations: Array<Location>;\r\n    next: string | null;\r\n};\r\nexport type ErrorLazyLocations = Action<typeof ERROR_LAZY_LOCATIONS> & {\r\n    isLazyError: boolean;\r\n}\r\nexport type SuccessLoadingLocation = Action<typeof SUCCESS_LOADING_LOCATION> & {\r\n    location: Location[];\r\n};\r\n\r\nexport const startLoadingLocations = (isLoading: boolean): StartLoadingLocations => ({\r\n    type: START_LOADING_LOCATIONS,\r\n    isLoading,\r\n});\r\nexport const successLoadingLocations = (locations: Array<Location>, next: string | null): SuccessLoadingLocations => ({\r\n    type: SUCCESS_LOADING_LOCATIONS,\r\n    locations,\r\n    next\r\n});\r\nexport const errorLoadingLocations = (isError: boolean): ErrorLoadingLocations => ({\r\n    type: ERROR_LOADING_LOCATIONS,\r\n    isError,\r\n});\r\nexport const startLazyLocations = (isLazyLoading: boolean): StartLazyLocations => ({\r\n    type: START_LAZY_LOCATIONS,\r\n    isLazyLoading,\r\n});\r\nexport const successLazyLocations = (locations: Array<Location>, next: string | null): SuccessLazyLocations => ({\r\n    type: SUCCESS_LAZY_LOCATIONS,\r\n    locations,\r\n    next\r\n});\r\nexport const errorLazyLocations = (isLazyError: boolean): ErrorLazyLocations => ({\r\n    type: ERROR_LAZY_LOCATIONS,\r\n    isLazyError,\r\n});\r\nexport const successLoadingLocation = (location: Location[]): SuccessLoadingLocation => ({\r\n    type: SUCCESS_LOADING_LOCATION,\r\n    location\r\n});\r\n\r\n//thunks\r\ntype StartLoadingLocationsAC = (isLoading: boolean) => StartLoadingLocations;\r\ntype StartLazyLocationsAC = (isLazyLoading: boolean) => StartLazyLocations;\r\ntype SuccessLoadingLocationsAC = (episodes: Location[], next: string | null) => SuccessLoadingLocations;\r\ntype SuccessLazyLocationsAC = (episodes: Location[], next: string | null) => SuccessLazyLocations;\r\ntype SuccessLoadingLocationAC = (episode: Location[]) => SuccessLoadingLocation;\r\ntype ErrorLoadingLocationsAC = (isError: boolean) => ErrorLoadingLocations;\r\ntype ErrorLazyLocationsAC = (isLazyError: boolean) => ErrorLazyLocations;\r\n\r\ntype ThunkActions = [\r\n    (StartLoadingLocationsAC | StartLazyLocationsAC),\r\n    (SuccessLoadingLocationsAC | SuccessLazyLocationsAC | SuccessLoadingLocationAC),\r\n    (ErrorLoadingLocationsAC | ErrorLazyLocationsAC),\r\n];\r\n\r\nexport const loadingLocations = (url: string, [startLoading, successLoading, errLoading]: ThunkActions): ThunkType => {\r\n    return (dispatch: Dispatch<AllLocationsActions>) => {\r\n        dispatch(startLoading(true));\r\n        if (successLoading === successLoadingLocation) {\r\n            return getData(url)\r\n            .then(data => dispatch(successLoading([data])))\r\n            .catch(() => dispatch(errLoading(true)));\r\n        } else {\r\n            return getData(url)\r\n            .then(data => dispatch(successLoading(data.results, data.info.next)))\r\n            .catch(() => dispatch(errLoading(true)));\r\n        }\r\n    };\r\n};\r\n\r\nexport type InitialLocationState = {\r\n    isLoading: boolean;\r\n    isError: boolean;\r\n    isLazyLoading: boolean;\r\n    isLazyError: boolean;\r\n    locations: Array<Location>;\r\n    next: string | null;\r\n};\r\n\r\nconst initialLocationsState: InitialLocationState = {\r\n    isLoading: false,\r\n    isError: false,\r\n    isLazyLoading: false,\r\n    isLazyError: false,\r\n    locations: [],\r\n    next: null,\r\n};\r\n\r\nexport type AllLocationsActions = StartLoadingLocations | SuccessLoadingLocations | ErrorLoadingLocations\r\n                                   | StartLazyLocations | SuccessLazyLocations | ErrorLazyLocations | SuccessLoadingLocation;\r\n\r\nconst locationsReducer = (state = initialLocationsState, action: AllLocationsActions) => {\r\n    switch(action.type) {\r\n        case START_LOADING_LOCATIONS: return {\r\n            ...state,\r\n            isLoading: action.isLoading\r\n        };\r\n        case SUCCESS_LOADING_LOCATIONS: return {\r\n            ...state,\r\n            locations: [...action.locations],\r\n            isLoading: false,\r\n            next: action.next\r\n        };\r\n        case ERROR_LOADING_LOCATIONS: return {\r\n            ...state,\r\n            isLoading: false,\r\n            isError: action.isError,\r\n        };\r\n        case START_LAZY_LOCATIONS: return {\r\n            ...state,\r\n            isLazyLoading: action.isLazyLoading\r\n        };\r\n        case SUCCESS_LAZY_LOCATIONS: return {\r\n            ...state,\r\n            locations: [...state.locations, ...action.locations],\r\n            isLazyLoading: false,\r\n             next: action.next,\r\n        };\r\n        case ERROR_LAZY_LOCATIONS: return {\r\n            ...state,\r\n            isLazyError: action.isLazyError,\r\n        };\r\n        case SUCCESS_LOADING_LOCATION: return {\r\n            ...state,\r\n            locations: [...action.location],\r\n            isLoading: false,\r\n        };\r\n                                                                \r\n        default: return state;\r\n    };\r\n};\r\n                                                                \r\nexport default locationsReducer;","import { Action } from 'redux';\r\n\r\nconst SEARCH_VALUE = 'SEARCH_VALUE';\r\n\r\ntype SetSearchValue = Action<typeof SEARCH_VALUE> & {\r\n    value: string;\r\n}\r\n\r\nexport const setSearchValue = (value: string): SetSearchValue => ({\r\n    type: SEARCH_VALUE,\r\n    value\r\n});\r\n\r\nexport type InitialSearchValueState = {\r\n    value: string;\r\n};\r\n\r\nconst initialSearchValueState: InitialSearchValueState = {\r\n    value: '',\r\n};\r\n\r\nexport type AllSearchValueActions = SetSearchValue;\r\n\r\nconst searchValueReducer = (state = initialSearchValueState, action: AllSearchValueActions) => {\r\n    switch(action.type) {\r\n        case SEARCH_VALUE: return {\r\n            ...state,\r\n            value: action.value,\r\n        };\r\n\r\n        default: return { ...state };\r\n    }\r\n};\r\n\r\nexport default searchValueReducer;\r\n","import { combineReducers, createStore, Store, applyMiddleware, Action } from 'redux';\r\nimport thunk, { ThunkAction } from \"redux-thunk\";\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\n\r\nimport charactersReducer, { InitialCharactersState } from './charactersStore';\r\nimport episodesReducer, { InitialEpisodesState } from './episodesStore';\r\nimport locationsReducer, { InitialLocationState } from './locationsStore';\r\nimport searchValueReducer, { InitialSearchValueState } from './searchFieldStore';\r\n\r\nconst allReducers = combineReducers({\r\n    charactersInfo: charactersReducer,\r\n    episodesInfo: episodesReducer,\r\n    locationInfo: locationsReducer,\r\n    searchValue: searchValueReducer,\r\n});\r\n\r\nexport type ThunkType = ThunkAction<void, State, unknown, Action<string>>;\r\n\r\nexport type State = {\r\n    charactersInfo: InitialCharactersState,\r\n    episodesInfo: InitialEpisodesState,\r\n    locationInfo: InitialLocationState,\r\n    searchValue: InitialSearchValueState\r\n};\r\n\r\nconst store: Store<State> = createStore(allReducers, composeWithDevTools(applyMiddleware(thunk)));\r\n\r\n//characters selector\r\nexport const churactersSelector = (state: State) => {\r\n    const characters = state.charactersInfo.characters;\r\n    const searchVlue = state.searchValue.value.toLocaleLowerCase().trim();\r\n\r\n    return characters.filter(character => {\r\n        const filteringCharacterParams = character.gender + character.name + character.species + character.status;\r\n\r\n        return filteringCharacterParams.toLocaleLowerCase().includes(searchVlue);\r\n    })\r\n};\r\nexport const nextSelector = (state: State) => state.charactersInfo.next;\r\nexport const isLoadingSelector = (state: State) => state.charactersInfo.isLoading;\r\nexport const isLazyLoadingSelector = (state: State) => state.charactersInfo.isLazyLoading;\r\n\r\n//episodes selector\r\nexport const episodesSelector = (state: State) => {\r\n    const episodes = state.episodesInfo.episodes;\r\n    const searchValue = state.searchValue.value.toLocaleLowerCase().trim();\r\n\r\n    return episodes.filter(episode => {\r\n        const filteringEpisodeParams = episode.air_date + episode.name + episode.episode;\r\n\r\n        return filteringEpisodeParams.toLocaleLowerCase().includes(searchValue);\r\n    });\r\n};\r\nexport const isLoadingEpisodesSelector = (state: State) => state.episodesInfo.isLoading;\r\nexport const isLazyLoadingEpisodesSelector = (state: State) => state.episodesInfo.isLazyLoading;\r\nexport const nextEpisodesSelector = (state: State) => state.episodesInfo.next;\r\n\r\n//locations selector\r\nexport const isLoadingLocationsSelector = (state: State) => state.locationInfo.isLoading;\r\nexport const isLazyLoadingLocationSelector = (state: State) => state.locationInfo.isLazyLoading;\r\nexport const nextLocationsSelector = (state: State) => state.locationInfo.next;\r\nexport const locationsSelector = (state: State) => {\r\n    const locations = state.locationInfo.locations;\r\n    const searchValue = state.searchValue.value.toLocaleLowerCase().trim();\r\n\r\n    return locations.filter(location => {\r\n        const filteringLocationParams = location.dimencion + location.name + location.type;\r\n\r\n        return filteringLocationParams.toLocaleLowerCase().includes(searchValue);\r\n    })\r\n};\r\n\r\n//search value selector\r\nexport const searchValueSelector = (state: State) => state.searchValue.value;\r\n\r\nexport default store;\r\n","export const urlNumber = (url: string): string => {\r\n    return url.split('/')[url.split('/').length - 1];\r\n};\r\n\r\nexport const urlParam = (url: string): string => {\r\n    const splitedURL = url.split('/');\r\n    return `${splitedURL[splitedURL.length-2]}/${splitedURL[splitedURL.length-1]}`\r\n};","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { urlNumber } from '../../helpers/urlUtility';\r\n\r\nimport './Character.scss';\r\n\r\ntype Props = {\r\n    character: Character; \r\n};\r\n\r\nconst Character: React.FC<Props> = ({ character }) => {\r\n    const { \r\n        image, name, location, origin, episode,\r\n        species, status, gender\r\n    } = character;\r\n    const locationNumber = urlNumber(location.url);\r\n    const originNumber = urlNumber(origin.url);\r\n    const episodesNumbers: Array<string> = [];\r\n\r\n    for (let i = 0; i < episode.length; i++) {\r\n        episodesNumbers.push(urlNumber(episode[i]))\r\n    };\r\n\r\n\r\n    return (\r\n    <div className=\"character__wrapper\">\r\n        <div className=\"character__bio\">\r\n            <img\r\n                className=\"character__photo\"\r\n                src={image}\r\n                alt=\"photo\"\r\n            />\r\n            <div className=\"character__info-wrapper\">\r\n                <div className=\"character__info\">\r\n                    Name: {name}\r\n                </div>\r\n                <div className=\"character__info\">\r\n                    Gender: {gender}\r\n                </div>\r\n                <div className=\"character__info\">\r\n                    Species: {species}\r\n                </div>\r\n                <div className=\"character__info\">\r\n                    Status: {status}\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <Link\r\n            className=\"character__link character__location\"\r\n            to={`/locations/${locationNumber}`}\r\n        >\r\n            Location: {location.name}\r\n        </Link>\r\n        <Link\r\n            className=\"character__link character__location\"\r\n            to={`/locations/${originNumber}`}\r\n        >\r\n            Origin: {origin.name}\r\n        </Link>\r\n        <div className=\"character__episodes\">\r\n            Episodes:\r\n            {episodesNumbers.map(number => (\r\n                <Link\r\n                    key={number}\r\n                    className=\"character__link\"\r\n                    to={`/episodes/${number}`}\r\n                >\r\n                    Episode: {number}\r\n                </Link>\r\n            ))}\r\n        </div>\r\n    </div>\r\n    )\r\n};\r\n\r\nexport default Character;","import { useHistory } from 'react-router-dom';\r\nimport './ButtonBack.scss';\r\n\r\nconst ButtonBack = () => {\r\n  const history = useHistory();\r\n\r\n  return (\r\n    <button\r\n      type=\"button\"\r\n      className=\"button-back\"\r\n      onClick={() => history.goBack()}\r\n    >\r\n      <div className=\"button-back__content-wrapper\">\r\n        <span\r\n          className=\"button-back__icon\"\r\n        >\r\n          <svg width=\"6\" height=\"10\" viewBox=\"0 0 6 10\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n            <path fillRule=\"evenodd\" clipRule=\"evenodd\" d=\"M5.47124 0.528606C5.21089 0.268256 4.78878 0.268256 4.52843 0.528606L0.528433 4.52861C0.268083 4.78896 0.268083 5.21107 0.528433 5.47141L4.52843 9.47141C4.78878 9.73176 5.21089 9.73176 5.47124 9.47141C5.73159 9.21107 5.73159 8.78896 5.47124 8.52861L1.94265 5.00001L5.47124 1.47141C5.73159 1.21107 5.73159 0.788955 5.47124 0.528606Z\" fill=\"#313237\"/>\r\n          </svg>\r\n        </span>\r\n        <span\r\n          className=\"button-back__text\"\r\n        >\r\n          Back\r\n        </span>\r\n      </div>\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default ButtonBack;\r\n","import { useDispatch, useSelector } from 'react-redux';\r\nimport { searchValueSelector } from '../../store/rootStore';\r\nimport { Dispatch } from 'react';\r\n\r\nimport './SearchField.scss';\r\nimport { AllSearchValueActions, setSearchValue } from '../../store/searchFieldStore';\r\nimport { useLocation } from 'react-router-dom';\r\n\r\nconst SearchField = () => {\r\n    const value = useSelector(searchValueSelector);\r\n    const searchValueDispatch = useDispatch<Dispatch<AllSearchValueActions>>();\r\n    const location = useLocation();\r\n    const availableURLs = '/characters/locations/episodes';\r\n\r\n    const passURL = availableURLs.includes(location.pathname);\r\n    \r\n\r\n    return (\r\n        <div>\r\n            {passURL && <input\r\n                type=\"text\"\r\n                value={value}\r\n                onChange={({ target }) => {\r\n                    searchValueDispatch(setSearchValue(target.value))\r\n                }}\r\n                placeholder=\"search...\"\r\n            />}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SearchField;","import { useEffect, Dispatch, useRef, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useParams } from 'react-router';\r\n\r\nimport './Characters.scss';\r\nimport { \r\n    errorLazyLoading, errorLoading,\r\n    loadingCharacters, startLazyLoading, startLoadingCharacters,\r\n    successLazyLoading, successLoadingCharacter, successLoadingCharacters \r\n} from \"../../store/charactersStore\";\r\nimport { churactersSelector, isLoadingSelector, nextSelector, ThunkType } from \"../../store/rootStore\";\r\nimport Character from \"../Character/Character\";\r\nimport { urlParam } from \"../../helpers/urlUtility\";\r\nimport ButtonBack from \"../button-back/ButtonBack\";\r\nimport SearchField from \"../SearchField/SearchField\";\r\n\r\ntype Params = {\r\n    characterID: string;\r\n};\r\n\r\nconst Characters = () => {\r\n    const personThunkDispatch = useDispatch<Dispatch<ThunkType>>();\r\n    const pageEnd = useRef<HTMLDivElement>(null);\r\n    const characters = useSelector(churactersSelector);\r\n    const next = useSelector(nextSelector);\r\n    const isLoading = useSelector(isLoadingSelector);\r\n    const isLazyLoading = useSelector(isLoadingSelector);\r\n    let [isLazyLoad, setLazyLoad] = useState(false);\r\n    const params: Params = useParams();\r\n\r\n    useEffect(() => {\r\n        if (params.characterID) {  \r\n            personThunkDispatch(loadingCharacters(`character/${params.characterID}`, [startLoadingCharacters, successLoadingCharacter, errorLoading]));\r\n        } else {\r\n            personThunkDispatch(loadingCharacters('character/?page=1', [startLoadingCharacters, successLoadingCharacters, errorLoading]));\r\n        }\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (!isLoading) {\r\n            const observer = new IntersectionObserver((entries) => {\r\n                if (entries[0].isIntersecting) {\r\n                    setLazyLoad(true);\r\n                }; \r\n            },\r\n            { rootMargin: '700px' })\r\n            if (pageEnd.current !== null) {\r\n                observer.observe(pageEnd.current)\r\n            }\r\n        }\r\n    }, [isLoading]);\r\n\r\n    useEffect(() => {\r\n        if(isLazyLoad) {\r\n            setLazyLoad(false);\r\n            const param = next && urlParam(next);\r\n            param && personThunkDispatch(loadingCharacters(param, [startLazyLoading, successLazyLoading, errorLazyLoading]));\r\n        }   \r\n    }, [isLazyLoad]);\r\n\r\n    if (isLoading) {\r\n        return (\r\n            <div>\r\n                LOADING...\r\n            </div>\r\n        )\r\n    };\r\n\r\n    return (\r\n        <>  \r\n            <SearchField />\r\n            <ButtonBack />\r\n            <div className=\"characters__wrapper\">\r\n                {characters.map(character => (\r\n                    <Character\r\n                        key={character.id}\r\n                        character={character}\r\n                    />\r\n                ))}\r\n            </div>\r\n            {isLazyLoading && <div>\r\n                LOADING...\r\n            </div>}\r\n            {!params.characterID && <div className=\"characters__lazy-loading\" ref={pageEnd}>\r\n                Loading\r\n            </div>}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Characters;","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { urlNumber } from '../../helpers/urlUtility';\r\n\r\nimport './Episode.scss';\r\n\r\ntype Props = {\r\n    epis: Episode;\r\n};\r\n\r\nconst Episode: React.FC<Props> = ({ epis }) => {\r\n    const { air_date, name, episode, characters } = epis;\r\n    const characterNumbers: Array<string> = [];\r\n\r\n    for (let i = 0; i < characters.length; i++) {\r\n        characterNumbers.push(urlNumber(characters[i]))\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <div className=\"episode__container\">\r\n                <div className=\"episode__info\">\r\n                    <div className=\"episode__data episode__name\">\r\n                        Name: {name}\r\n                    </div>\r\n                    <div className=\"episode__data episode__air-date\">\r\n                        AIR date: {air_date}\r\n                    </div>\r\n                    <div className=\"episode__data episode__episode\">\r\n                        Episode: {episode}\r\n                    </div>\r\n                </div>\r\n                <div className=\"episode__links\">\r\n                    Characters:\r\n                    {characterNumbers.map(number => (\r\n                        <Link\r\n                            key={number}\r\n                            className=\"episode__link\"\r\n                            to={`/characters/${number}`}\r\n                        >\r\n                            Character: {number}\r\n                        </Link>\r\n                    ))}\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n};\r\n\r\nexport default Episode;\r\n","import { Dispatch, useRef, useState } from 'react';\r\nimport { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useParams } from 'react-router-dom';\r\n\r\nimport { urlParam } from '../../helpers/urlUtility';\r\nimport { errorLazyEpisodes, errorLoadingEpisodes, loadingEpisodes, startLazyEpisodes, startLoadingEpisodes, successLazyEpisodes, successLoadingEpisode, successLoadingEpisodes } from '../../store/episodesStore';\r\nimport { episodesSelector, isLazyLoadingEpisodesSelector, isLoadingEpisodesSelector, nextEpisodesSelector, ThunkType } from '../../store/rootStore';\r\nimport ButtonBack from '../button-back/ButtonBack';\r\nimport Episode from '../Episode/Episode';\r\nimport SearchField from '../SearchField/SearchField';\r\n\r\n\r\ntype Params = {\r\n    episodesID: string;\r\n};\r\n\r\nconst Episodes = () => {\r\n    const episodeThunkDispatch = useDispatch<Dispatch<ThunkType>>();\r\n    const pageEnd = useRef<HTMLDivElement>(null);\r\n    const params: Params = useParams();\r\n    const episodes = useSelector(episodesSelector);\r\n    const isLoading = useSelector(isLoadingEpisodesSelector);\r\n    const isLazyLoading = useSelector(isLazyLoadingEpisodesSelector);\r\n    const next = useSelector(nextEpisodesSelector);\r\n    let [isLazyLoad, setLazyLoad] = useState(false);\r\n\r\n    useEffect(() => {\r\n        if (params.episodesID) {\r\n            episodeThunkDispatch(loadingEpisodes(`episode/${params.episodesID}`, [startLoadingEpisodes, successLoadingEpisode, errorLoadingEpisodes]));\r\n        } else {\r\n            episodeThunkDispatch(loadingEpisodes('episode/?page=1', [startLoadingEpisodes, successLoadingEpisodes, errorLoadingEpisodes]));\r\n        }  \r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (!isLoading) {\r\n            const observer = new IntersectionObserver((entries) => {\r\n                if (entries[0].isIntersecting) {\r\n                    setLazyLoad(true);\r\n                }; \r\n            },\r\n            { rootMargin: '700px' })\r\n            if (pageEnd.current !== null) {\r\n                observer.observe(pageEnd.current)\r\n            }\r\n        }\r\n    }, [isLoading]);\r\n\r\n    useEffect(() => {\r\n        if(isLazyLoad) {\r\n            setLazyLoad(false);\r\n            const param = next && urlParam(next);\r\n            param && episodeThunkDispatch(loadingEpisodes(param, [startLazyEpisodes, successLazyEpisodes, errorLazyEpisodes]));\r\n        }   \r\n    }, [isLazyLoad]);\r\n\r\n    if (isLoading) {\r\n        return (\r\n            <div>\r\n                LOADING...\r\n            </div>\r\n        )\r\n    };\r\n    \r\n\r\n    return (\r\n        <>\r\n            <SearchField />\r\n            <ButtonBack />\r\n            {episodes.map(episode => (\r\n                <Episode\r\n                    key={episode.id}\r\n                    epis={episode}\r\n                />\r\n            ))}\r\n            {isLazyLoading && <div>\r\n                LOADING...\r\n            </div>}\r\n            {!params.episodesID && <div className=\"characters__lazy-loading\" ref={pageEnd}>\r\n                Loading\r\n            </div>}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Episodes;","import './HomePage.scss';\r\n\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nconst HomePage = () => {\r\n    return (\r\n        <div className=\"homepage__container\">\r\n            <NavLink\r\n              to=\"/characters\"\r\n              exact\r\n              className=\"homepage__link\"\r\n            >\r\n                Characters\r\n            </NavLink>\r\n            <NavLink\r\n              to=\"/episodes\"\r\n              exact\r\n              className=\"homepage__link\"\r\n            >\r\n                Episodes\r\n            </NavLink>\r\n            <NavLink\r\n              to=\"/locations\"\r\n              exact\r\n              className=\"homepage__link\"\r\n            >\r\n                Locations\r\n            </NavLink>\r\n        </div> \r\n    );\r\n};\r\n\r\nexport default HomePage;","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { urlNumber } from '../../helpers/urlUtility';\r\n\r\nimport './Location.scss';\r\n\r\ntype Props = {\r\n    loca: Location;\r\n};\r\n\r\nconst Location: React.FC<Props> = ({ loca }) => {\r\n    const { dimencion, name, residents, type } = loca;\r\n    const residentsNumbers: Array<string> = [];\r\n\r\n    for (let i = 0; i < residents.length; i++) {\r\n        residentsNumbers.push(urlNumber(residents[i]))\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <div className=\"location__container\">\r\n                <div className=\"location__info\">\r\n                    <div className=\"location__data location__name\">\r\n                        Name: {name}\r\n                    </div>\r\n                    <div className=\"location__data location__demantion\">\r\n                        Dimencion: {dimencion}\r\n                    </div>\r\n                    <div className=\"location__data location__type\">\r\n                        Type: {type}\r\n                    </div>\r\n                </div>\r\n                <div className=\"location__links\">\r\n                    Characters:\r\n                    {residentsNumbers.map(number => (\r\n                        <Link\r\n                            key={number}\r\n                            className=\"location__link\"\r\n                            to={`/characters/${number}`}\r\n                        >\r\n                            Character: {number}\r\n                        </Link>\r\n                    ))}\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n};\r\n\r\nexport default Location;\r\n","import { Dispatch, useRef, useState } from 'react';\r\nimport { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useParams } from 'react-router-dom';\r\n\r\nimport { urlParam } from '../../helpers/urlUtility';\r\nimport { errorLazyLocations, errorLoadingLocations, loadingLocations, startLazyLocations, startLoadingLocations, successLazyLocations, successLoadingLocation, successLoadingLocations } from '../../store/locationsStore';\r\nimport { isLazyLoadingLocationSelector, isLoadingLocationsSelector, locationsSelector, nextLocationsSelector, ThunkType } from '../../store/rootStore';\r\nimport ButtonBack from '../button-back/ButtonBack';\r\nimport Location from '../Location/Location';\r\nimport SearchField from '../SearchField/SearchField';\r\nimport './Locations.scss';\r\n\r\ntype Params = {\r\n    locationsID: string;\r\n};\r\n\r\nconst Locations = () => {\r\n    const locationThunkDispatch = useDispatch<Dispatch<ThunkType>>();\r\n    const pageEnd = useRef<HTMLDivElement>(null);\r\n    const params: Params = useParams();\r\n    const isLoading = useSelector(isLoadingLocationsSelector);\r\n    const isLazyLoading = useSelector(isLazyLoadingLocationSelector);\r\n    const next = useSelector(nextLocationsSelector);\r\n    const locations = useSelector(locationsSelector);\r\n    let [isLazyLoad, setLazyLoad] = useState(false);\r\n\r\n    useEffect(() => {\r\n        if (params.locationsID) {\r\n            locationThunkDispatch(loadingLocations(`location/${params.locationsID}`, [startLoadingLocations, successLoadingLocation, errorLoadingLocations]));\r\n        } else {\r\n            locationThunkDispatch(loadingLocations('location/?page=1', [startLoadingLocations, successLoadingLocations, errorLoadingLocations]));\r\n        }  \r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (!isLoading) {\r\n            const observer = new IntersectionObserver((entries) => {\r\n                if (entries[0].isIntersecting) {\r\n                    setLazyLoad(true);\r\n                }; \r\n            },\r\n            { rootMargin: '700px' })\r\n            if (pageEnd.current !== null) {\r\n                observer.observe(pageEnd.current)\r\n            }\r\n        }\r\n    }, [isLoading]);\r\n\r\n    useEffect(() => {\r\n        if(isLazyLoad) {\r\n            setLazyLoad(false);\r\n            const param = next && urlParam(next);\r\n            param && locationThunkDispatch(loadingLocations(param, [startLazyLocations, successLazyLocations, errorLazyLocations]));\r\n        }   \r\n    }, [isLazyLoad]);\r\n\r\n    return (\r\n        <>\r\n            <SearchField />\r\n            <ButtonBack />\r\n            <div className=\"locations__wrapper\">\r\n                {locations.map(location => (\r\n                    <Location\r\n                        key={location.id}\r\n                        loca={location}\r\n                    />\r\n                ))}\r\n            </div>\r\n            {isLazyLoading && <div>\r\n                LOADING...\r\n            </div>}\r\n            {!params.locationsID && <div className=\"characters__lazy-loading\" ref={pageEnd}>\r\n                Loading\r\n            </div>}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Locations;","import { Route, Switch } from 'react-router-dom';\r\n\r\nimport Characters from '../Characters/Characters';\r\nimport Episodes from '../Episodes/Episodes';\r\nimport HomePage from '../HomePage/HomePage';\r\nimport Locations from '../Locations/Locations';\r\n\r\nimport './App.scss';\r\n\r\nconst App = () => {\r\n  return (\r\n    <div className=\"app\">\r\n      <Switch>\r\n        <Route \r\n          path='/'\r\n          exact\r\n          component={HomePage}\r\n        />\r\n        <Route \r\n          path='/characters/:characterID?'\r\n          exact\r\n          component={Characters}\r\n        />\r\n        <Route \r\n          path='/episodes/:episodesID?'\r\n          exact\r\n          component={Episodes}\r\n        />\r\n        <Route \r\n          path='/locations/:locationsID?'\r\n          exact\r\n          component={Locations}\r\n        />\r\n      </Switch> \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { HashRouter } from 'react-router-dom';\r\nimport { Provider } from 'react-redux';\r\n\r\nimport './index.scss';\r\nimport App from './components/App/App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport store from './store/rootStore';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <HashRouter>\r\n      <Provider store={store}>\r\n        <App />\r\n      </Provider>\r\n    </HashRouter>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}